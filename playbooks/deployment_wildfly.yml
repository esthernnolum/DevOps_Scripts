# This playbook is responsible for deploying  Artifacts to specified windows server from jenkins.

---
- hosts: '{{ host }}'
  strategy: free
  serial: 10
  become_method: runas
  gather_facts: true

  vars:
    instance_count: '{{ instance_count }}'
    win_backup_path: 'E:\backup\AUTOMATED_BACKUPS\{{ current_component }}'
    source_path: '/var/lib/jenkins/workspace/{{ jenkins_job }}/target'
    wf_deploy_path: 'E:\data'

  tasks:
    - name: 2 >>> new variable with current date time
      set_fact: temp="{{lookup('pipe','date \"+%Y-%m-%d_TIME:%H:%M\"')}}"

    - name: 3 >>> print variable
      debug: msg="Current date and time is {{temp}}"

    - name: 4 >>> get file stat to be able to perform a check in the following task
      win_stat:
        path: "{{ item }}"
      with_items: "{{ win_backup_path }}"
   
    - set_fact: mydate="{{lookup('pipe','date +%Y-%m-%d_%H-%M-%S')}}"
    - debug: var=mydate

    - set_fact:
        instance: "{{ instance | default([]) + ['{{ wf_deploy_instance }}_0%s' | format(item + 1)] }}"
      loop: "{{ range(0, instance_count | int ) | list }}"    
    - debug: var=instance

    - name: Create backup directory in the instances if it does not exist
      win_file:
        path: "{{ item }}"
        state: directory
      with_items: "{{ win_backup_path }}"

    - name: Confirm '{{ item }}\{{ current_component }}.war' is present in all instances
      win_stat:
        path: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war'
      with_items: "{{ instance }}"
      register: result
    - debug: var=result

    # same artifact is deployed across app instances, so use only one backup directory, to save diskspace
    - name: Backup the existing artifact build on the first instance
      win_copy:
        src: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war'
        dest: '{{ win_backup_path }}\{{ current_component }}.war_{{ mydate }}'
        remote_src: True
      with_items: "{{ instance }}"
      when: result.results[0].stat.exists == true

    - name: Remove a build from all the instances, if present
      win_file:
        path: '{{ wf_deploy_path}}\{{ item }}\standalone\deployments\{{ current_component }}.war'
        state: absent
      with_items: "{{ instance }}"

    - name: Remove the .deployed file from all the instances, if present
      win_file:
        path: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war.deployed'
        state: absent
      with_items: "{{ instance }}"

    - name: Remove the .undeployed file from all the instances, if present
      win_file:
        path: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war.undeployed'
        state: absent
      with_items: "{{ instance }}"

    - name: Deploy the artifact to the deployment folder across all the instances
      win_copy:
        src: "{{ source_path }}/{{ current_component }}.war"
        dest: '{{ wf_deploy_path}}\{{ item }}\standalone\deployments\{{ current_component }}.war'
      with_items: "{{ instance }}"
      
    - name: Remove the .failed file from all the instances, if present
      win_file:
        path: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war.failed'
        state: absent
      with_items: "{{ instance }}" 

    - name: Confirm the build is deployed across all the instances
      win_wait_for:
        path: '{{ wf_deploy_path }}\{{ item }}\standalone\deployments\{{ current_component }}.war.deployed'
        timeout: 180
      poll: 1
      with_items: "{{ instance }}"
